// Load environment variables
require('dotenv').config();

// Set environment variables manually as fallback
if (!process.env.JWT_SECRET) {
    process.env.JWT_SECRET = 'your-super-secret-jwt-key-here-change-this-in-production';
}
if (!process.env.MONGODB_URI) {
    process.env.MONGODB_URI = 'mongodb+srv://TrungChienn:Chien123@latn.af6hwio.mongodb.net/LATNShop08?retryWrites=true&w=majority&appName=LATN';
}
if (!process.env.PORT) {
    process.env.PORT = '3001';
}


const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3001; // S·ª≠ d·ª•ng port 3001 c·ªë ƒë·ªãnh

// Middleware c∆° b·∫£n
app.use(cors()); // Cho ph√©p truy c·∫≠p t·ª´ t√™n mi·ªÅn kh√°c (frontend)
app.use(express.json()); // Parse JSON request body
app.use(express.urlencoded({ extended: true })); // Parse URL-encoded request body

// Ph·ª•c v·ª• t·ªáp tƒ©nh t·ª´ th∆∞ m·ª•c uploads
app.use('/uploads', express.static(path.join(__dirname, '../uploads')));

// K·∫øt n·ªëi MongoDB v·ªõi c√°c t√πy ch·ªçn ƒë∆∞·ª£c h·ªó tr·ª£ trong phi√™n b·∫£n m·ªõi
mongoose.connect(process.env.MONGODB_URI, {
    // T√πy ch·ªçn cho Driver
    connectTimeoutMS: 30000,         // TƒÉng th·ªùi gian timeout k·∫øt n·ªëi l√™n 30 gi√¢y
    socketTimeoutMS: 45000,          // TƒÉng th·ªùi gian ch·ªù socket l√™n 45 gi√¢y
    serverSelectionTimeoutMS: 30000, // Th·ªùi gian ch·ªù tr∆∞·ªõc khi timeout m·ªôt thao t√°c
    maxPoolSize: 50,                 // TƒÉng s·ªë request ƒë·ªìng th·ªùi t·ªëi ƒëa (thay th·∫ø poolSize)
    minPoolSize: 5,                  // S·ªë k·∫øt n·ªëi t·ªëi thi·ªÉu trong pool
    heartbeatFrequencyMS: 10000,     // T·∫ßn su·∫•t ho·∫°t ƒë·ªông heartbeat
    retryWrites: true,               // T·ª± ƒë·ªông th·ª≠ l·∫°i c√°c thao t√°c ghi khi m·∫•t k·∫øt n·ªëi
    // T√πy ch·ªçn ·ª©ng d·ª•ng
    appName: 'Laptop-AI-Commerce'    // T√™n ·ª©ng d·ª•ng (gi√∫p theo d√µi trong logs MongoDB)
})
.then(() => console.log('MongoDB connected successfully!'))
.catch(err => {
    console.error('MongoDB connection error:', err);
    // Log th√™m c√°c th√¥ng tin chi ti·∫øt v·ªÅ l·ªói
    if (err.name === 'MongooseTimeoutError' || err.name === 'MongoTimeoutError') {
        console.error('Timeout khi k·∫øt n·ªëi ƒë·∫øn MongoDB. H√£y ki·ªÉm tra:');
        console.error('1. ƒê·ªãa ch·ªâ MongoDB URI c√≥ ch√≠nh x√°c kh√¥ng');
        console.error('2. MongoDB server c√≥ ƒëang ch·∫°y kh√¥ng');
        console.error('3. C√≥ v·∫•n ƒë·ªÅ v·ªÅ m·∫°ng ho·∫∑c t∆∞·ªùng l·ª≠a kh√¥ng');
    }
});
    // ---- C√°c Routes API s·∫Ω ƒë∆∞·ª£c th√™m v√†o ƒë√¢y ----
    const authRoutes = require('./routes/auth.routes'); // Import auth routes
    const productRoutes = require('./routes/product.routes'); // Import product routes
    const shopRoutes = require('./routes/shop.routes'); 
    const cartRoutes = require('./routes/cart.routes');
    const orderRoutes = require('./routes/order.routes'); 
    const userRoutes = require('./routes/user.routes'); // <<< Import user routes
    const categoryRoutes = require('./routes/category.routes');
    const brandRoutes = require('./routes/brand.routes');
    const reviewRoutes = require('./routes/review.routes'); // Import review routes
    const userInteractionRoutes = require('./routes/userInteraction.routes'); // Import user interaction routes
    const aiRoutes = require('./routes/ai.routes'); // Import AI routes
    const chatRoutes = require('./routes/chat.routes'); // Import chat routes
    const mockChatRoutes = require('./routes/mockChat.routes'); // Import mock chat routes


    app.use('/api/auth', authRoutes); // G·∫Øn auth routes v√†o ƒë∆∞·ªùng d·∫´n /api/auth
    app.use('/api/products', productRoutes); // G·∫Øn product routes v√†o /api/products
    app.use('/api/shops', shopRoutes);
    app.use('/api/cart', cartRoutes); 
    app.use('/api/orders', orderRoutes);
    app.use('/api/users', userRoutes); // <<< G·∫Øn user routes v√†o ƒë∆∞·ªùng d·∫´n /api/users
    app.use('/api/categories', categoryRoutes);
    app.use('/api/brands', brandRoutes);
    app.use('/api/reviews', reviewRoutes); // G·∫Øn review routes v√†o /api/reviews
    app.use('/api', userInteractionRoutes); // G·∫Øn user interaction routes v√†o /api
    app.use('/api/ai', aiRoutes); // G·∫Øn AI routes v√†o /api/ai
    // app.use('/api/chat', mockChatRoutes); // Mock AI - DISABLED 
    app.use('/api/chat', chatRoutes); // Real OpenAI API - ENABLED üöÄ
    
    // Kh·ªüi ƒë·ªông server tr√™n port 3001 c·ªë ƒë·ªãnh
    app.listen(PORT, () => {
        console.log(`Server is running on port ${PORT}`);
    });
