/**
 * Middleware ƒë·ªÉ ki·ªÉm tra quy·ªÅn truy c·∫≠p d·ª±a tr√™n vai tr√≤ c·ªßa ng∆∞·ªùi d√πng.
 * @param {string[]} allowedRoles - M·∫£ng c√°c vai tr√≤ ƒë∆∞·ª£c ph√©p truy c·∫≠p.
 * @returns {Function} - Middleware function.
 */
const authorize = (allowedRoles) => {
  return (req, res, next) => {
    console.log(`üîê Authorization check for role(s): ${allowedRoles} on path: ${req.originalUrl}`);
    console.log(`üîê Auth header exists: ${!!req.headers.authorization}`);
    
    // Gi·∫£ ƒë·ªãnh r·∫±ng middleware x√°c th·ª±c (v√≠ d·ª•: protect) ƒë√£ ch·∫°y tr∆∞·ªõc
    // v√† ƒë√£ g·∫Øn th√¥ng tin ng∆∞·ªùi d√πng (bao g·ªìm vai tr√≤) v√†o req.user
    if (!req.user || !req.user.role) {
      console.log('‚ùå Authorization failed: No user or role information');
      // N·∫øu kh√¥ng c√≥ th√¥ng tin ng∆∞·ªùi d√πng ho·∫∑c vai tr√≤, coi nh∆∞ ch∆∞a x√°c th·ª±c ƒë·∫ßy ƒë·ªß
      return res.status(401).json({
        success: false,
        message: 'Unauthorized: User information not available. Please login again.'
      });
    }

    const { role } = req.user; // L·∫•y vai tr√≤ c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
    console.log(`üîê User role: ${role}, Required roles: ${allowedRoles}`);

    if (allowedRoles.includes(role)) {
      // N·∫øu vai tr√≤ c·ªßa ng∆∞·ªùi d√πng n·∫±m trong danh s√°ch c√°c vai tr√≤ ƒë∆∞·ª£c ph√©p
      console.log(`‚úÖ Authorization successful: ${role} has access to ${req.originalUrl}`);
      next(); // Cho ph√©p ti·∫øp t·ª•c x·ª≠ l√Ω request
    } else {
      // N·∫øu vai tr√≤ kh√¥ng ƒë∆∞·ª£c ph√©p
      console.log(`‚ùå Authorization denied: ${role} does not have permission for ${req.originalUrl}`);
      res.status(403).json({
        success: false,
        message: 'Forbidden: You do not have permission to access this resource.'
      });
    }
  };
};

module.exports = authorize;