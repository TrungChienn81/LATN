const jwt = require('jsonwebtoken');
const User = require('../models/User'); // ƒê∆∞·ªùng d·∫´n t·ªõi User model

/**
 * Middleware ƒë·ªÉ b·∫£o v·ªá routes, y√™u c·∫ßu ng∆∞·ªùi d√πng ph·∫£i ƒëƒÉng nh·∫≠p (c√≥ token h·ª£p l·ªá).
 * G·∫Øn th√¥ng tin ng∆∞·ªùi d√πng ƒë√£ x√°c th·ª±c v√†o req.user.
 */
const protect = async (req, res, next) => {
  let token;

  console.log(`üõ°Ô∏è Protect middleware triggered for path: ${req.originalUrl}`);
  console.log(`üõ°Ô∏è Request headers:`, JSON.stringify({
    authorization: req.headers.authorization ? 'Bearer [...]' : 'undefined', // kh√¥ng hi·ªÉn th·ªã token ƒë·∫ßy ƒë·ªß v√¨ l√Ω do b·∫£o m·∫≠t
    'content-type': req.headers['content-type'],
    'user-agent': req.headers['user-agent']
  }));

  // Ki·ªÉm tra xem token c√≥ trong header Authorization kh√¥ng v√† c√≥ ƒë√∫ng ƒë·ªãnh d·∫°ng 'Bearer token' kh√¥ng
  if (
    req.headers.authorization &&
    req.headers.authorization.startsWith('Bearer')
  ) {
    try {
      console.log('üîç Authorization header found with Bearer format');
      // L·∫•y token t·ª´ header (b·ªè ph·∫ßn 'Bearer ')
      token = req.headers.authorization.split(' ')[1];

      if (!token) {
        console.log('‚ùå Token extraction failed: Token is empty or malformed');
        throw new Error('Token is empty or malformed');
      }

      console.log(`üîç Token extracted, length: ${token.length} chars`);

      // X√°c th·ª±c token
      console.log('üîê Verifying JWT token...');
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      console.log(`‚úÖ Token verified successfully. User ID: ${decoded.id}`);

      // T√¨m ng∆∞·ªùi d√πng d·ª±a tr√™n ID trong token v√† lo·∫°i b·ªè tr∆∞·ªùng password
      console.log(`üîç Finding user with ID: ${decoded.id}`);
      req.user = await User.findById(decoded.id).select('-password');

      if (!req.user) {
        return res.status(401).json({
          success: false,
          message: 'Unauthorized: User not found for this token. The user may have been deleted.'
        });
      }

      next(); // Ng∆∞·ªùi d√πng h·ª£p l·ªá, ti·∫øp t·ª•c
    } catch (error) {
      console.error('Token verification error:', error.message);
      // C√°c l·ªói c√≥ th·ªÉ x·∫£y ra: TokenExpiredError, JsonWebTokenError, NotBeforeError
      let message = 'Unauthorized: Invalid token.';
      if (error.name === 'TokenExpiredError') {
        message = 'Unauthorized: Token has expired. Please login again.';
      }
      return res.status(401).json({ success: false, message });
    }
  }

  if (!token) {
    // N·∫øu kh√¥ng c√≥ token trong header
    return res.status(401).json({
      success: false,
      message: 'Unauthorized: No token provided. Access denied.'
    });
  }
};

module.exports = protect;