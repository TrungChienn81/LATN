import React, { useState, useEffect } from 'react';
import {
  Container,
  Typography,
  Box,
  Grid,
  Card,
  CardContent,
  Button,
  Alert,
  Paper,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Divider,
  LinearProgress,
  Chip
} from '@mui/material';
import {
  SmartToy as BotIcon,
  Chat as ChatIcon,
  Psychology as AIIcon,
  Search as SearchIcon,
  Recommend as RecommendIcon,
  AttachMoney as MoneyIcon,
  Warning as WarningIcon,
  CheckCircle as CheckIcon
} from '@mui/icons-material';
import ChatWindow from '../components/Chat/ChatWindow';
import { useAuth } from '../contexts/AuthContext';
import api from '../services/api';

const ChatTestPage = () => {
  const { user } = useAuth();
  const [chatOpen, setChatOpen] = useState(false);
  const [chatMinimized, setChatMinimized] = useState(false);
  const [costStats, setCostStats] = useState(null);
  const [loading, setLoading] = useState(false);

  // Load cost statistics
  const loadCostStats = async () => {
    try {
      const response = await api.get('/chat/cost-stats');
      if (response.data.success) {
        setCostStats(response.data.data);
      }
    } catch (error) {
      console.error('Error loading cost stats:', error);
    }
  };

  // Reset costs (for testing)
  const resetCosts = async () => {
    setLoading(true);
    try {
      const response = await api.post('/chat/reset-costs');
      if (response.data.success) {
        await loadCostStats();
        alert('‚úÖ ƒê√£ reset b·ªô ƒë·∫øm chi ph√≠!');
      }
    } catch (error) {
      console.error('Error resetting costs:', error);
      alert('‚ùå L·ªói reset chi ph√≠!');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadCostStats();
    
    // Auto refresh cost stats every 30 seconds
    const interval = setInterval(loadCostStats, 30000);
    return () => clearInterval(interval);
  }, []);

  const sampleQuestions = [
    "T√¥i c·∫ßn laptop gaming gi√° kho·∫£ng 20 tri·ªáu",
    "Laptop n√†o t·ªët cho sinh vi√™n?",
    "So s√°nh laptop Dell v√† HP",
    "PC gaming c·∫•u h√¨nh cao nh·∫•t",
    "Laptop vƒÉn ph√≤ng pin tr√¢u",
    "M√°y t√≠nh cho ƒë·ªì h·ªça 3D"
  ];

  const features = [
    {
      icon: <AIIcon color="primary" />,
      title: "RAG Technology",
      description: "S·ª≠ d·ª•ng Retrieval-Augmented Generation ƒë·ªÉ t√¨m ki·∫øm th√¥ng tin s·∫£n ph·∫©m ch√≠nh x√°c"
    },
    {
      icon: <SearchIcon color="primary" />,
      title: "Smart Search",
      description: "T√¨m ki·∫øm th√¥ng minh d·ª±a tr√™n ng·ªØ c·∫£nh v√† t·ª´ kh√≥a ti·∫øng Vi·ªát"
    },
    {
      icon: <RecommendIcon color="primary" />,
      title: "Product Recommendations",
      description: "ƒê·ªÅ xu·∫•t s·∫£n ph·∫©m ph√π h·ª£p d·ª±a tr√™n nhu c·∫ßu v√† ng√¢n s√°ch"
    },
    {
      icon: <ChatIcon color="primary" />,
      title: "Natural Conversation",
      description: "Tr√≤ chuy·ªán t·ª± nhi√™n b·∫±ng ti·∫øng Vi·ªát v·ªõi AI assistant"
    }
  ];

  const handleOpenChat = () => {
    setChatOpen(true);
    setChatMinimized(false);
  };

  const handleCloseChat = () => {
    setChatOpen(false);
    setChatMinimized(false);
  };

  const getCostColor = () => {
    if (!costStats) return 'success';
    const usedPercentage = (costStats.totalCost / costStats.budget) * 100;
    if (usedPercentage >= 90) return 'error';
    if (usedPercentage >= 70) return 'warning';
    return 'success';
  };

  const getCostProgress = () => {
    if (!costStats) return 0;
    return Math.min((costStats.totalCost / costStats.budget) * 100, 100);
  };

  return (
    <Container maxWidth="lg" sx={{ py: 4 }}>
      <Box sx={{ mb: 4, textAlign: 'center' }}>
        <Typography variant="h3" gutterBottom>
          ü§ñ AI Chatbot Demo
        </Typography>
        <Typography variant="h6" color="text.secondary" gutterBottom>
          Tr·∫£i nghi·ªám AI assistant v·ªõi OpenAI GPT-4o-mini - Ti·∫øt ki·ªám nh·∫•t!
        </Typography>
      </Box>

      {/* Cost Monitoring Section */}
      {costStats && (
        <Grid container spacing={3} sx={{ mb: 4 }}>
          <Grid item xs={12}>
            <Paper sx={{ p: 3, bgcolor: getCostColor() === 'error' ? 'error.light' : 'background.paper' }}>
              <Typography variant="h5" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                <MoneyIcon />
                üí∞ Theo d√µi Chi ph√≠ OpenAI
              </Typography>
              
              <Grid container spacing={2}>
                <Grid item xs={12} md={3}>
                  <Card sx={{ bgcolor: 'primary.main', color: 'white' }}>
                    <CardContent>
                      <Typography variant="h6">Ng√¢n s√°ch</Typography>
                      <Typography variant="h4">${costStats.budget}</Typography>
                    </CardContent>
                  </Card>
                </Grid>
                
                <Grid item xs={12} md={3}>
                  <Card sx={{ bgcolor: getCostColor() === 'error' ? 'error.main' : 'success.main', color: 'white' }}>
                    <CardContent>
                      <Typography variant="h6">ƒê√£ d√πng</Typography>
                      <Typography variant="h4">${costStats.totalCost.toFixed(4)}</Typography>
                    </CardContent>
                  </Card>
                </Grid>
                
                <Grid item xs={12} md={3}>
                  <Card sx={{ bgcolor: 'info.main', color: 'white' }}>
                    <CardContent>
                      <Typography variant="h6">C√≤n l·∫°i</Typography>
                      <Typography variant="h4">${costStats.remainingBudget.toFixed(4)}</Typography>
                    </CardContent>
                  </Card>
                </Grid>
                
                <Grid item xs={12} md={3}>
                  <Card sx={{ bgcolor: 'warning.main', color: 'white' }}>
                    <CardContent>
                      <Typography variant="h6">Tokens</Typography>
                      <Typography variant="h4">{costStats.totalTokensUsed}</Typography>
                    </CardContent>
                  </Card>
                </Grid>
              </Grid>
              
              <Box sx={{ mt: 3 }}>
                <Typography variant="body2" gutterBottom>
                  Ti·∫øn tr√¨nh s·ª≠ d·ª•ng ng√¢n s√°ch ({getCostProgress().toFixed(1)}%)
                </Typography>
                <LinearProgress 
                  variant="determinate" 
                  value={getCostProgress()} 
                  color={getCostColor()}
                  sx={{ height: 10, borderRadius: 5 }}
                />
              </Box>
              
              <Box sx={{ mt: 2, display: 'flex', gap: 1, flexWrap: 'wrap' }}>
                <Chip 
                  icon={<CheckIcon />}
                  label={`Model: GPT-4o-mini (R·∫ª nh·∫•t!)`}
                  color="success"
                  variant="outlined"
                />
                <Chip 
                  icon={<WarningIcon />}
                  label={`Chi ph√≠/tin nh·∫Øn: ~$0.001-0.005`}
                  color="warning"
                  variant="outlined"
                />
                <Button 
                  size="small" 
                  onClick={resetCosts}
                  disabled={loading}
                  variant="outlined"
                >
                  Reset Chi ph√≠
                </Button>
                <Button 
                  size="small" 
                  onClick={loadCostStats}
                  variant="outlined"
                >
                  Refresh
                </Button>
              </Box>

              {/* Tips */}
              <Box sx={{ mt: 2 }}>
                <Typography variant="h6" gutterBottom>üí° Tips ti·∫øt ki·ªám:</Typography>
                <List dense>
                  {costStats.tips.map((tip, index) => (
                    <ListItem key={index}>
                      <ListItemText primary={`‚Ä¢ ${tip}`} />
                    </ListItem>
                  ))}
                </List>
              </Box>
            </Paper>
          </Grid>
        </Grid>
      )}

      <Grid container spacing={3}>
        {/* Demo Section */}
        <Grid item xs={12} md={6}>
          <Paper sx={{ p: 3 }}>
            <Typography variant="h5" gutterBottom>
              üöÄ Demo Chatbot
            </Typography>
            <Typography variant="body1" color="text.secondary" sx={{ mb: 3 }}>
              Nh·∫•n n√∫t b√™n d∆∞·ªõi ƒë·ªÉ m·ªü chat v√† tr·∫£i nghi·ªám AI assistant v·ªõi OpenAI th·∫≠t!
            </Typography>
            
            <Button
              variant="contained"
              size="large"
              startIcon={<BotIcon />}
              onClick={handleOpenChat}
              fullWidth
              sx={{ mb: 2 }}
            >
              M·ªü Real AI Chat Assistant üî•
            </Button>

            <Alert severity="success">
              ‚úÖ OpenAI GPT-4o-mini ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t! Chi ph√≠ si√™u th·∫•p ch·ªâ $0.15/1M tokens ƒë·∫ßu v√†o.
            </Alert>
          </Paper>
        </Grid>

        {/* Sample Questions */}
        <Grid item xs={12} md={6}>
          <Paper sx={{ p: 3 }}>
            <Typography variant="h5" gutterBottom>
              üí¨ C√¢u h·ªèi m·∫´u
            </Typography>
            <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
              Th·ª≠ c√°c c√¢u h·ªèi n√†y ƒë·ªÉ test chatbot:
            </Typography>
            
            <List>
              {sampleQuestions.map((question, index) => (
                <ListItem key={index} sx={{ py: 0.5 }}>
                  <ListItemText 
                    primary={`"${question}"`} 
                    sx={{ 
                      '& .MuiListItemText-primary': { 
                        fontStyle: 'italic',
                        fontSize: '0.9rem'
                      }
                    }}
                  />
                </ListItem>
              ))}
            </List>
          </Paper>
        </Grid>

        {/* Features */}
        <Grid item xs={12}>
          <Typography variant="h5" gutterBottom sx={{ mt: 2 }}>
            ‚ö° T√≠nh nƒÉng AI
          </Typography>
          <Grid container spacing={2}>
            {features.map((feature, index) => (
              <Grid item xs={12} sm={6} md={3} key={index}>
                <Card sx={{ height: '100%' }}>
                  <CardContent>
                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                      {feature.icon}
                      <Typography variant="h6" sx={{ ml: 1 }}>
                        {feature.title}
                      </Typography>
                    </Box>
                    <Typography variant="body2" color="text.secondary">
                      {feature.description}
                    </Typography>
                  </CardContent>
                </Card>
              </Grid>
            ))}
          </Grid>
        </Grid>
      </Grid>

      {/* Chat Window */}
      <ChatWindow
        open={chatOpen}
        onClose={handleCloseChat}
        minimized={chatMinimized}
        onMinimize={() => setChatMinimized(!chatMinimized)}
      />
    </Container>
  );
};

export default ChatTestPage;