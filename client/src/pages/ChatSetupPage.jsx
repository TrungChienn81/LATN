import React from 'react';
import {
  Container,
  Typography,
  Box,
  Grid,
  Card,
  CardContent,
  Alert,
  Paper,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Divider,
  Button,
  Chip
} from '@mui/material';
import {
  Settings as SetupIcon,
  CheckCircle as CheckIcon,
  Warning as WarningIcon,
  Info as InfoIcon,
  Launch as LaunchIcon,
  Code as CodeIcon
} from '@mui/icons-material';

const ChatSetupPage = () => {
  const setupSteps = [
    {
      title: "1. ƒêƒÉng k√Ω OpenAI API",
      description: "T·∫°o t√†i kho·∫£n t·∫°i platform.openai.com",
      status: "required",
      details: [
        "Truy c·∫≠p https://platform.openai.com/",
        "ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi ho·∫∑c ƒëƒÉng nh·∫≠p",
        "X√°c th·ª±c s·ªë ƒëi·ªán tho·∫°i",
        "N·∫°p credit t·ªëi thi·ªÉu $5"
      ]
    },
    {
      title: "2. T·∫°o API Key",
      description: "T·∫°o API key trong ph·∫ßn API Keys",
      status: "required",
      details: [
        "V√†o m·ª•c 'API Keys' trong dashboard",
        "Click 'Create new secret key'",
        "Copy API key (ch·ªâ hi·ªÉn th·ªã 1 l·∫ßn)",
        "L∆∞u tr·ªØ an to√†n"
      ]
    },
    {
      title: "3. C·∫•u h√¨nh Server",
      description: "Th√™m API key v√†o file .env",
      status: "required",
      details: [
        "T·∫°o file .env trong th∆∞ m·ª•c server/",
        "Th√™m d√≤ng: OPENAI_API_KEY=your-api-key-here",
        "Restart server",
        "Ki·ªÉm tra logs kh√¥ng c√≥ l·ªói"
      ]
    },
    {
      title: "4. K√≠ch ho·∫°t Real AI",
      description: "Chuy·ªÉn t·ª´ Mock AI sang OpenAI",
      status: "optional",
      details: [
        "M·ªü file server/src/app.js",
        "Comment d√≤ng mockChatRoutes",
        "Uncomment d√≤ng chatRoutes",
        "Restart server"
      ]
    }
  ];

  const costInfo = [
    {
      model: "GPT-3.5 Turbo",
      inputCost: "$0.0015 / 1K tokens",
      outputCost: "$0.002 / 1K tokens",
      recommended: true
    },
    {
      model: "GPT-4",
      inputCost: "$0.03 / 1K tokens", 
      outputCost: "$0.06 / 1K tokens",
      recommended: false
    }
  ];

  const alternatives = [
    {
      name: "Mock AI (Hi·ªán t·∫°i)",
      cost: "Mi·ªÖn ph√≠",
      pros: ["Kh√¥ng c·∫ßn API key", "Demo ƒë∆∞·ª£c ngay", "Ph·∫£n h·ªìi nhanh"],
      cons: ["Kh√¥ng th√¥ng minh", "C√¢u tr·∫£ l·ªùi c·ªë ƒë·ªãnh", "Kh√¥ng h·ªçc ƒë∆∞·ª£c"]
    },
    {
      name: "OpenAI GPT-3.5",
      cost: "~$5-20/th√°ng",
      pros: ["Th√¥ng minh cao", "Hi·ªÉu ng·ªØ c·∫£nh", "Ph·∫£n h·ªìi t·ª± nhi√™n"],
      cons: ["C·∫ßn tr·∫£ ph√≠", "C·∫ßn internet", "C√≥ th·ªÉ ch·∫≠m"]
    },
    {
      name: "Local LLM",
      cost: "Mi·ªÖn ph√≠",
      pros: ["Kh√¥ng c·∫ßn internet", "B·∫£o m·∫≠t cao", "Kh√¥ng gi·ªõi h·∫°n"],
      cons: ["C·∫ßn GPU m·∫°nh", "Setup ph·ª©c t·∫°p", "Hi·ªáu su·∫•t th·∫•p h∆°n"]
    }
  ];

  return (
    <Container maxWidth="lg" sx={{ py: 4 }}>
      <Box sx={{ mb: 4, textAlign: 'center' }}>
        <Typography variant="h3" gutterBottom>
          ‚öôÔ∏è C·∫•u h√¨nh AI Chatbot
        </Typography>
        <Typography variant="h6" color="text.secondary" gutterBottom>
          H∆∞·ªõng d·∫´n setup OpenAI API cho chatbot th√¥ng minh
        </Typography>
      </Box>

      {/* Current Status */}
      <Alert severity="info" sx={{ mb: 3 }}>
        <Typography variant="h6" gutterBottom>
          ü§ñ Tr·∫°ng th√°i hi·ªán t·∫°i: Mock AI System
        </Typography>
        <Typography variant="body2">
          Chatbot ƒëang s·ª≠ d·ª•ng h·ªá th·ªëng Mock AI v·ªõi c√¢u tr·∫£ l·ªùi ƒë∆∞·ª£c l·∫≠p tr√¨nh s·∫µn. 
          ƒê·ªÉ c√≥ tr·∫£i nghi·ªám AI th√¥ng minh, b·∫°n c·∫ßn c·∫•u h√¨nh OpenAI API.
        </Typography>
      </Alert>

      {/* Setup Steps */}
      <Paper sx={{ p: 3, mb: 3 }}>
        <Typography variant="h5" gutterBottom>
          üìã C√°c b∆∞·ªõc c·∫•u h√¨nh
        </Typography>
        
        <Grid container spacing={2}>
          {setupSteps.map((step, index) => (
            <Grid item xs={12} md={6} key={index}>
              <Card sx={{ height: '100%' }}>
                <CardContent>
                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                    <SetupIcon color="primary" sx={{ mr: 1 }} />
                    <Typography variant="h6">
                      {step.title}
                    </Typography>
                    <Chip
                      label={step.status === 'required' ? 'B·∫Øt bu·ªôc' : 'T√πy ch·ªçn'}
                      color={step.status === 'required' ? 'error' : 'warning'}
                      size="small"
                      sx={{ ml: 'auto' }}
                    />
                  </Box>
                  
                  <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                    {step.description}
                  </Typography>
                  
                  <List dense>
                    {step.details.map((detail, idx) => (
                      <ListItem key={idx} sx={{ py: 0.5 }}>
                        <ListItemIcon sx={{ minWidth: 30 }}>
                          <CheckIcon fontSize="small" color="success" />
                        </ListItemIcon>
                        <ListItemText 
                          primary={detail}
                          primaryTypographyProps={{ variant: 'body2' }}
                        />
                      </ListItem>
                    ))}
                  </List>
                </CardContent>
              </Card>
            </Grid>
          ))}
        </Grid>
      </Paper>

      {/* Cost Information */}
      <Paper sx={{ p: 3, mb: 3 }}>
        <Typography variant="h5" gutterBottom>
          üí∞ Chi ph√≠ s·ª≠ d·ª•ng OpenAI
        </Typography>
        
        <Grid container spacing={2}>
          {costInfo.map((info, index) => (
            <Grid item xs={12} md={6} key={index}>
              <Card sx={{ 
                height: '100%',
                border: info.recommended ? '2px solid' : 'none',
                borderColor: info.recommended ? 'success.main' : 'transparent'
              }}>
                <CardContent>
                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                    <Typography variant="h6">
                      {info.model}
                    </Typography>
                    {info.recommended && (
                      <Chip
                        label="Khuy·∫øn ngh·ªã"
                        color="success"
                        size="small"
                        sx={{ ml: 'auto' }}
                      />
                    )}
                  </Box>
                  
                  <Typography variant="body2" sx={{ mb: 1 }}>
                    <strong>Input:</strong> {info.inputCost}
                  </Typography>
                  <Typography variant="body2" sx={{ mb: 2 }}>
                    <strong>Output:</strong> {info.outputCost}
                  </Typography>
                  
                  <Alert severity="info" sx={{ fontSize: '0.8rem' }}>
                    ∆Ø·ªõc t√≠nh: ~100-500 tin nh·∫Øn/ng√†y ‚âà $2-10/th√°ng
                  </Alert>
                </CardContent>
              </Card>
            </Grid>
          ))}
        </Grid>
      </Paper>

      {/* Alternatives Comparison */}
      <Paper sx={{ p: 3, mb: 3 }}>
        <Typography variant="h5" gutterBottom>
          üîÑ So s√°nh c√°c l·ª±a ch·ªçn
        </Typography>
        
        <Grid container spacing={2}>
          {alternatives.map((alt, index) => (
            <Grid item xs={12} md={4} key={index}>
              <Card sx={{ height: '100%' }}>
                <CardContent>
                  <Typography variant="h6" gutterBottom>
                    {alt.name}
                  </Typography>
                  
                  <Typography variant="h5" color="primary" sx={{ mb: 2 }}>
                    {alt.cost}
                  </Typography>
                  
                  <Typography variant="subtitle2" color="success.main" gutterBottom>
                    ‚úÖ ∆Øu ƒëi·ªÉm:
                  </Typography>
                  <List dense>
                    {alt.pros.map((pro, idx) => (
                      <ListItem key={idx} sx={{ py: 0 }}>
                        <ListItemText 
                          primary={`‚Ä¢ ${pro}`}
                          primaryTypographyProps={{ variant: 'body2' }}
                        />
                      </ListItem>
                    ))}
                  </List>
                  
                  <Typography variant="subtitle2" color="error.main" gutterBottom sx={{ mt: 1 }}>
                    ‚ùå Nh∆∞·ª£c ƒëi·ªÉm:
                  </Typography>
                  <List dense>
                    {alt.cons.map((con, idx) => (
                      <ListItem key={idx} sx={{ py: 0 }}>
                        <ListItemText 
                          primary={`‚Ä¢ ${con}`}
                          primaryTypographyProps={{ variant: 'body2' }}
                        />
                      </ListItem>
                    ))}
                  </List>
                </CardContent>
              </Card>
            </Grid>
          ))}
        </Grid>
      </Paper>

      {/* Quick Actions */}
      <Paper sx={{ p: 3, bgcolor: 'grey.50' }}>
        <Typography variant="h6" gutterBottom>
          üöÄ H√†nh ƒë·ªông nhanh
        </Typography>
        
        <Grid container spacing={2}>
          <Grid item xs={12} sm={6} md={3}>
            <Button
              variant="contained"
              fullWidth
              startIcon={<LaunchIcon />}
              href="https://platform.openai.com/"
              target="_blank"
              rel="noopener noreferrer"
            >
              ƒêƒÉng k√Ω OpenAI
            </Button>
          </Grid>
          
          <Grid item xs={12} sm={6} md={3}>
            <Button
              variant="outlined"
              fullWidth
              startIcon={<CodeIcon />}
              href="/chat-test"
            >
              Test Mock AI
            </Button>
          </Grid>
          
          <Grid item xs={12} sm={6} md={3}>
            <Button
              variant="outlined"
              fullWidth
              startIcon={<InfoIcon />}
              href="/ai-test"
            >
              AI Recommendations
            </Button>
          </Grid>
          
          <Grid item xs={12} sm={6} md={3}>
            <Button
              variant="outlined"
              fullWidth
              startIcon={<WarningIcon />}
              disabled
            >
              Real AI (C·∫ßn setup)
            </Button>
          </Grid>
        </Grid>
      </Paper>
    </Container>
  );
};

export default ChatSetupPage; 